<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RestTemplate on 이쟁쟁의 블로그</title>
    <link>https://leejaengjaeng.github.io/tags/resttemplate/</link>
    <description>Recent content in RestTemplate on 이쟁쟁의 블로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <managingEditor>leejaengjaeng@naver.com (leejaengjaeng)</managingEditor>
    <webMaster>leejaengjaeng@naver.com (leejaengjaeng)</webMaster>
    <lastBuildDate>Thu, 16 Jan 2020 14:41:00 +0900</lastBuildDate>
    
	<atom:link href="https://leejaengjaeng.github.io/tags/resttemplate/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RestTemplate 들여다보기</title>
      <link>https://leejaengjaeng.github.io/post/resttemplate/</link>
      <pubDate>Thu, 16 Jan 2020 14:41:00 +0900</pubDate>
      <author>leejaengjaeng@naver.com (leejaengjaeng)</author>
      <guid>https://leejaengjaeng.github.io/post/resttemplate/</guid>
      <description>Spring 4.3.25 기준으로 변경사항이 존재할 수 있습니다.
 https://docs.spring.io/spring/docs/4.3.25.RELEASE/spring-framework-reference/htmlsingle/#rest-resttemplate
 RestTemplate org.springframework.web.client패키지에 속한 클래스로 client-side에서 Restful한 서비스에 접근하는것에 도움을 줍니다.
필요성 Restful한 API를 호출하기위해서 java에서는 전통적으로 Apache의 HttpClient같은 헬퍼클래스를 사용해 왔지만, 이 HttpClient는 편하게 사용하기엔 너무 low level의 컴포넌트 였습니다.
String uri = &amp;quot;https://example.com/hotels/1/bookings&amp;quot;;PostMethod post = new PostMethod(uri);String request = // create booking request contentpost.setRequestEntity(new StringRequestEntity(request));httpClient.executeMethod(post);if (HttpStatus.SC_CREATED == post.getStatusCode()) {Header location = post.getRequestHeader(&amp;quot;Location&amp;quot;);if (location !</description>
    </item>
    
  </channel>
</rss>