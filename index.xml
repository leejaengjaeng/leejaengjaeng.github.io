<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>이쟁쟁의 블로그</title>
    <link>https://leejaengjaeng.github.io/</link>
    <description>Recent content on 이쟁쟁의 블로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <managingEditor>leejaengjaeng@naver.com (leejaengjaeng)</managingEditor>
    <webMaster>leejaengjaeng@naver.com (leejaengjaeng)</webMaster>
    <lastBuildDate>Mon, 13 Apr 2020 19:14:00 +0900</lastBuildDate>
    
	<atom:link href="https://leejaengjaeng.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring Docs #Web Servlet &gt; Filter</title>
      <link>https://leejaengjaeng.github.io/post/spring5-filter/</link>
      <pubDate>Mon, 13 Apr 2020 19:14:00 +0900</pubDate>
      <author>leejaengjaeng@naver.com (leejaengjaeng)</author>
      <guid>https://leejaengjaeng.github.io/post/spring5-filter/</guid>
      <description>Spring framework Document 읽기
 현재 담당하는 서비스가 Spring5를 사용하진 않지만 5의 문서를 읽으면서 추가된 내용이 아니라 Spring framework 자체의 내용에 집중해볼 예정입니다.   Docs : https://docs.spring.io/spring/docs/5.2.4.RELEASE/spring-framework-reference/web.html#filters Repo : https://github.com/spring-projects/spring-framework Github repository에서 &amp;ldquo;T&amp;quot;를 누르면 파일 검색이 가능합니다.
 Filters   Spring Web MVC는 Servlet API 기반으로 만들어진 웹 프레임워크 이며 Spring의 시작부터 포함되어 있었습니다. Spring 5.0 부터는 Spring WebFlux가 소개되었고 MVC를 대체하여 사용할 수 있습니다.  DispatcherServlet  Spring MVC도 다른 web framework들과 마찬가지로 front controller 패턴을 중심으로 설계되었습니다.</description>
    </item>
    
    <item>
      <title>Spring Docs #Web Servlet &gt; Spring Web MVC</title>
      <link>https://leejaengjaeng.github.io/post/spring5-doc-web_mvc/</link>
      <pubDate>Wed, 18 Mar 2020 16:47:00 +0900</pubDate>
      <author>leejaengjaeng@naver.com (leejaengjaeng)</author>
      <guid>https://leejaengjaeng.github.io/post/spring5-doc-web_mvc/</guid>
      <description>Spring framework Document 읽기
 현재 담당하는 서비스가 Spring5를 사용하진 않지만 5의 문서를 읽으면서 추가된 내용이 아니라 Spring framework 자체의 내용에 집중해볼 예정입니다.   Docs : https://docs.spring.io/spring/docs/5.2.4.RELEASE/spring-framework-reference/web.html#spring-web Repo : https://github.com/spring-projects/spring-framework Github repository에서 &amp;ldquo;T&amp;quot;를 누르면 파일 검색이 가능합니다.
 Spring Web MVC  Spring Web MVC는 Servlet API 기반으로 만들어진 웹 프레임워크 이며 Spring의 시작부터 포함되어 있었습니다. Spring 5.0 부터는 Spring WebFlux가 소개되었고 MVC를 대체하여 사용할 수 있습니다.  DispatcherServlet   Spring MVC도 다른 web framework들과 마찬가지로 front controller 패턴을 중심으로 설계되었습니다.</description>
    </item>
    
    <item>
      <title>Spring Docs #Data Access &gt; Transaction Management</title>
      <link>https://leejaengjaeng.github.io/post/spring5-doc-transaction_management/</link>
      <pubDate>Fri, 21 Feb 2020 11:35:00 +0900</pubDate>
      <author>leejaengjaeng@naver.com (leejaengjaeng)</author>
      <guid>https://leejaengjaeng.github.io/post/spring5-doc-transaction_management/</guid>
      <description>Spring framework Document 읽기
 현재 담당하는 서비스가 Spring5를 사용하진 않지만 5의 문서를 읽으면서 추가된 내용이 아니라 Spring framework 자체의 내용에 집중해볼 예정입니다.   Docs : https://docs.spring.io/spring/docs/5.2.3.RELEASE/spring-framework-reference/data-access.html#spring-data-tier Repo : https://github.com/spring-projects/spring-framework Github repository에서 &amp;ldquo;T&amp;quot;를 누르면 파일 검색이 가능합니다.
 Transaction Management  Transaction 지원은 스프링을 사용함에 있어 가장 강력한 이유중에 하나입니다. Spring은 transaction 관리에 일관된 추상화 계층을 제공하고 그로인해서 아래와 같은 이점을 취할 수 있습니다.  JTA(Java Transaction API), JDBC, Hibernate, JPA등 다양한 transaction API에 대해 일관된 모델을 사용할 수 있습니다.</description>
    </item>
    
    <item>
      <title>페이지 로딩 속도 개선</title>
      <link>https://leejaengjaeng.github.io/post/improve-load-time/</link>
      <pubDate>Mon, 17 Feb 2020 15:05:00 +0900</pubDate>
      <author>leejaengjaeng@naver.com (leejaengjaeng)</author>
      <guid>https://leejaengjaeng.github.io/post/improve-load-time/</guid>
      <description>페이지 로딩 속도 개선 사례 기록 문제점 새로 개발한 서비스의 핵심 기능을 제공하는 페이지에 로딩 속도 관련된 이슈가 있었습니다.
해당 페이지에서 보여줄 데이터가 일반적인 수준에서는 불편함이 없었지만, 보여줘야 하는 데이터가 일정 수준이 넘어가면 로딩 속도가 눈에 띄게 느려지고, Worst case에서는 처음 페이지 로딩시 20여초 가량 소요되었습니다.
문제 확인 문제가 되는 지점을 확인하기 위해서 우선 브라우저의 네트워크 도구를 사용해보니 두가지 문제가 발견되었습니다.  서버쪽 응답 자체가 느리다 (8초 가량 소요) 브라우저의 렌더링 과정에도 문제가 되는 지점이 있다 (11초 가량 소요)  결과적으로 이 두가지 포인트에 대해서 개선 방향을 잡고 문제를 조금 더 파악해 보기로 했습니다.</description>
    </item>
    
    <item>
      <title>Spring Docs #Core &gt; AOP</title>
      <link>https://leejaengjaeng.github.io/post/spring5-doc-aop/</link>
      <pubDate>Fri, 07 Feb 2020 18:13:00 +0900</pubDate>
      <author>leejaengjaeng@naver.com (leejaengjaeng)</author>
      <guid>https://leejaengjaeng.github.io/post/spring5-doc-aop/</guid>
      <description>Spring framework Document 읽기
 현재 담당하는 서비스가 Spring5를 사용하진 않지만 5의 문서를 읽으면서 추가된 내용이 아니라 Spring framework 자체의 내용에 집중해볼 예정입니다.   Docs : https://docs.spring.io/spring/docs/5.2.3.RELEASE/spring-framework-reference/core.html#spring-core Repo : https://github.com/spring-projects/spring-framework Github repository에서 &amp;ldquo;T&amp;quot;를 누르면 파일 검색이 가능합니다.
 Aspect Oriented Programming with Spring  OOP의 핵심 단위로 객체(class)가 있다면 AOP의 핵심 단위로는 aspect가 있습니다. AOP는 DI만큼이나 Spring의 핵심 기능입니다.  IoC 컨테이너는 AOP에 의존하진 않지만, AOP는 IoC 컨테이너를 보완하며 유용한 기능을 제공하는데 도움을 줍니다.</description>
    </item>
    
    <item>
      <title>Spring Docs #Core &gt; AOP</title>
      <link>https://leejaengjaeng.github.io/todo/spring5-doc-3/</link>
      <pubDate>Fri, 07 Feb 2020 18:13:00 +0900</pubDate>
      <author>leejaengjaeng@naver.com (leejaengjaeng)</author>
      <guid>https://leejaengjaeng.github.io/todo/spring5-doc-3/</guid>
      <description>Spring framework Document 읽기
 현재 담당하는 서비스가 Spring5를 사용하진 않지만 5의 문서를 읽으면서 추가된 내용이 아니라 Spring framework 자체의 내용에 집중해볼 예정입니다.   Docs : https://docs.spring.io/spring/docs/5.2.3.RELEASE/spring-framework-reference/core.html#spring-core Repo : https://github.com/spring-projects/spring-framework Github repository에서 &amp;ldquo;T&amp;quot;를 누르면 파일 검색이 가능합니다.
 Aspect Oriented Programming with Spring  OOP의 핵심 단위로 객체(class)가 있다면 AOP의 핵심 단위로는 aspect가 있습니다. AOP는 DI만큼이나 Spring의 핵심 기능입니다.  IoC 컨테이너는 AOP에 의존하진 않지만, AOP는 IoC 컨테이너를 보완하며 유용한 기능을 제공하는데 도움을 줍니다.</description>
    </item>
    
    <item>
      <title>Spring Docs #Core &gt; IoC Container</title>
      <link>https://leejaengjaeng.github.io/post/spring5-doc-ioc/</link>
      <pubDate>Tue, 28 Jan 2020 16:10:00 +0900</pubDate>
      <author>leejaengjaeng@naver.com (leejaengjaeng)</author>
      <guid>https://leejaengjaeng.github.io/post/spring5-doc-ioc/</guid>
      <description>Spring framework Document 읽기
 현재 담당하는 서비스가 Spring5를 사용하진 않지만 5의 문서를 읽으면서 추가된 내용이 아니라 Spring framework 자체의 내용에 집중해볼 예정입니다.   Docs : https://docs.spring.io/spring/docs/5.2.3.RELEASE/spring-framework-reference/core.html#spring-core Repo : https://github.com/spring-projects/spring-framework Github repository에서 &amp;ldquo;T&amp;quot;를 누르면 파일 검색이 가능합니다.
 The IoC Container 스프링에서 IOC container를 어떻게 구현했는지 알아봅니다.
Bean과 IoC Container   org.springframework.beans와 org.springframework.context 패키지가 Spring IoC container의 근간이 되는 패키지 입니다.
  Spring IOC Container에서 관리되는 모든 객체를 Bean이라고 합니다.</description>
    </item>
    
    <item>
      <title>RestTemplate 들여다보기</title>
      <link>https://leejaengjaeng.github.io/post/resttemplate/</link>
      <pubDate>Thu, 16 Jan 2020 14:41:00 +0900</pubDate>
      <author>leejaengjaeng@naver.com (leejaengjaeng)</author>
      <guid>https://leejaengjaeng.github.io/post/resttemplate/</guid>
      <description>Spring 4.3.25 기준으로 변경사항이 존재할 수 있습니다.
 https://docs.spring.io/spring/docs/4.3.25.RELEASE/spring-framework-reference/htmlsingle/#rest-resttemplate
 RestTemplate org.springframework.web.client패키지에 속한 클래스로 client-side에서 Restful한 서비스에 접근하는것에 도움을 줍니다.
필요성 Restful한 API를 호출하기위해서 java에서는 전통적으로 Apache의 HttpClient같은 헬퍼클래스를 사용해 왔지만, 이 HttpClient는 편하게 사용하기엔 너무 low level의 컴포넌트 였습니다.
String uri = &amp;quot;https://example.com/hotels/1/bookings&amp;quot;;PostMethod post = new PostMethod(uri);String request = // create booking request contentpost.setRequestEntity(new StringRequestEntity(request));httpClient.executeMethod(post);if (HttpStatus.SC_CREATED == post.getStatusCode()) {Header location = post.getRequestHeader(&amp;quot;Location&amp;quot;);if (location !</description>
    </item>
    
    <item>
      <title>Hugo 시작하기</title>
      <link>https://leejaengjaeng.github.io/post/howtousehugo/</link>
      <pubDate>Tue, 10 Dec 2019 14:43:17 +0900</pubDate>
      <author>leejaengjaeng@naver.com (leejaengjaeng)</author>
      <guid>https://leejaengjaeng.github.io/post/howtousehugo/</guid>
      <description>1. Hugo 설치 https://gohugo.io/getting-started/installing/
2. 프로젝트(사이트) 생성 hugo new site {이름}
프로젝트 구조 https://gohugo.io/getting-started/directory-structure/
  archetypes
 hugo new 커맨드를 통해 생성될 content file에 들어갈 front matter 등을 정의해 두는 디렉터리 front matter란 content file에 정의된 --- 부분 draft 필드는 프로젝트 빌드시 포함시킬지 여부    content
 작성할 글이 들어가는 디렉터리 content 내부의 최상의 디렉터리는 section으로 취급    data
 설정 파일이 들어가는 디렉터리 YAML, JSON, TOML 같은 포맷을 사용    layouts</description>
    </item>
    
  </channel>
</rss>